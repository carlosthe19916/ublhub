<?xml version="1.0"?>
<!--

    Copyright 2019 Project OpenUBL, Inc. and/or its affiliates
    and other contributors as indicated by the @author tags.

    Licensed under the Eclipse Public License - v 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    https://www.eclipse.org/legal/epl-2.0/

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>io.github.project-openubl</groupId>
        <artifactId>xsender-server</artifactId>
        <version>1.0.2-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>xsender-server-api-authz</artifactId>
    <name>XSender Server :: API :: Authz</name>

    <dependencies>
        <dependency>
            <groupId>io.github.project-openubl</groupId>
            <artifactId>xsender-server-core</artifactId>
        </dependency>

        <!--Quarkus-->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-oidc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-keycloak-authorization</artifactId>
        </dependency>

        <!--Tests-->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire-plugin.version}</version>
                <configuration>
                    <systemPropertyVariables>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>${maven.home}</maven.home>
                        <keycloak.version>${keycloak.version}</keycloak.version>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <version>${quarkus.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>native</id>
            <activation>
                <property>
                    <name>native</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${surefire-plugin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>native-image</goal>
                                </goals>
                                <configuration>
                                    <enableHttpUrlHandler>true</enableHttpUrlHandler>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${surefire-plugin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <native.image.path>
                                            ${project.build.directory}/${project.build.finalName}-runner
                                        </native.image.path>
                                        <java.util.logging.manager>
                                            org.jboss.logmanager.LogManager
                                        </java.util.logging.manager>
                                        <maven.home>${maven.home}</maven.home>
                                        <keycloak.version>${keycloak.version}</keycloak.version>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker</id>
            <activation>
                <property>
                    <name>docker</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>docker-prune</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${basedir}/../.github/docker-prune.sh</executable>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>services</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <!-- Automatically start Artemis MQ for integration testing - requires Docker -->
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${docker-plugin.version}</version>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <images>
                                <image>
                                    <name>vromero/activemq-artemis:2.9.0-alpine</name>
                                    <alias>activemq-artemis</alias>
                                    <run>
                                        <env>
                                            <ARTEMIS_USERNAME>quarkus</ARTEMIS_USERNAME>
                                            <ARTEMIS_PASSWORD>quarkus</ARTEMIS_PASSWORD>
                                        </env>
                                        <ports>
                                            <port>8161:8161</port>
                                            <port>61616:61616</port>
                                        </ports>
                                        <log>
                                            <prefix>ArtemisMQ:</prefix>
                                            <date>default</date>
                                            <color>cyan</color>
                                        </log>
                                        <wait>
                                            <tcp>
                                                <mode>mapped</mode>
                                                <ports>
                                                    <port>8161</port>
                                                </ports>
                                            </tcp>
                                            <time>10000</time>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <name>minio/minio</name>
                                    <alias>minio</alias>
                                    <run>
                                        <env>
                                            <MINIO_ACCESS_KEY>BQA2GEXO711FVBVXDWKM</MINIO_ACCESS_KEY>
                                            <MINIO_SECRET_KEY>uvgz3LCwWM3e400cDkQIH/y1Y4xgU4iV91CwFSPC
                                            </MINIO_SECRET_KEY>
                                        </env>
                                        <ports>
                                            <port>9000:9000</port>
                                        </ports>
                                        <log>
                                            <prefix>S3:</prefix>
                                            <date>default</date>
                                            <color>magenta</color>
                                        </log>
                                        <wait>
                                            <tcp>
                                                <mode>mapped</mode>
                                                <ports>
                                                    <port>9000</port>
                                                </ports>
                                            </tcp>
                                            <time>10000</time>
                                        </wait>
                                        <cmd>server /data</cmd>
                                    </run>
                                </image>
                                <image>
                                    <name>jboss/keycloak:11.0.2</name>
                                    <alias>keycloak</alias>
                                    <run>
                                        <env>
                                            <KEYCLOAK_USER>admin</KEYCLOAK_USER>
                                            <KEYCLOAK_PASSWORD>admin</KEYCLOAK_PASSWORD>
                                            <KEYCLOAK_IMPORT>/tmp/openubl-realm.json</KEYCLOAK_IMPORT>
                                        </env>
                                        <volumes>
                                            <bind>
                                                <volume>config/openubl-realm.json:/tmp/openubl-realm.json:Z</volume>
                                            </bind>
                                        </volumes>
                                        <ports>
                                            <port>8180:8080</port>
                                        </ports>
                                        <log>
                                            <prefix>Keycloak:</prefix>
                                            <date>default</date>
                                            <color>blue</color>
                                        </log>
                                        <wait>
                                            <tcp>
                                                <mode>mapped</mode>
                                                <ports>
                                                    <port>8080</port>
                                                </ports>
                                            </tcp>
                                            <time>10000</time>
                                        </wait>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>docker-start</id>
                                <phase>test-compile</phase>
                                <goals>
                                    <goal>stop</goal>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>docker-stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
