package io.github.project.openubl.ublhub.ubl.content.ruleunits;
unit InvoiceLineUnit;

import java.math.BigDecimal;
import java.math.RoundingMode;

import io.github.project.openubl.ublhub.ubl.content.catalogs.Catalog;
import io.github.project.openubl.ublhub.ubl.content.catalogs.Catalog7;
import io.github.project.openubl.ublhub.ubl.content.catalogs.Catalog7_1;
import io.github.project.openubl.ublhub.ubl.content.catalogs.Catalog16;

// Queries
query detalle
    $il: /invoiceLines
end

// Rules

rule "¿Requiere unidad medida?" when
    $il: /invoiceLines[ unidadMedida == null ]
then
    modify($il) {
        unidadMedida = "NIU";
    };
end

rule "¿Requiere tipo IGV?" when
    $il: /invoiceLines[ igvTipo == null ]
then
    modify($il) {
        igvTipo = "10";
    };
end

rule "¿Requiere tipo precio referencia?" when
    $il: /invoiceLines[ precioReferenciaTipo == null, igvTipo != null ]
then
    Catalog7 catalog7 = Catalog.valueOfCode(Catalog7.class, $il.igvTipo).orElseThrow(Catalog.invalidCatalogValue);
    Catalog16 catalog16 = catalog7.isOperacionOnerosa() ? Catalog16.PRECIO_UNITARIO_INCLUYE_IGV : Catalog16.VALOR_FERENCIAL_UNITARIO_EN_OPERACIONES_NO_ONEROSAS;
    modify($il) {
        precioReferenciaTipo = catalog16.getCode();
    };
end

rule "¿Requiere precio referencia cuando precio original no tiene impuestos?" when
    $il: /invoiceLines[ precioReferencia == null, igvTipo != null, precioConImpuestos == false ]
then
    Catalog7 catalog7 = Catalog.valueOfCode(Catalog7.class, $il.igvTipo).orElseThrow(Catalog.invalidCatalogValue);
    BigDecimal newPrecioReferencia = catalog7.isOperacionOnerosa() ? $il.precio.multiply(new BigDecimal("1.18")) : $il.precio;
    modify($il) {
        precioReferencia = newPrecioReferencia;
    };
end

rule "¿Requiere precio referencia cuando precio original si tiene impuestos?" when
    $il: /invoiceLines[ precioReferencia == null, igvTipo != null, precioConImpuestos == true ]
then
    Catalog7 catalog7 = Catalog.valueOfCode(Catalog7.class, $il.igvTipo).orElseThrow(Catalog.invalidCatalogValue);
    BigDecimal newPrecioReferencia = catalog7.isOperacionOnerosa() ? $il.precio : $il.precio.divide(new BigDecimal("1.18"), 2, RoundingMode.HALF_EVEN);
    modify($il) {
        precioReferencia = newPrecioReferencia;
    };
end

rule "¿Requiere icb?" when
    $il: /invoiceLines[ icb == null ]
then
    BigDecimal newIcb = $il.icbAplica ? $il.cantidad.multiply(new BigDecimal("0.2")).setScale(2) : BigDecimal.ZERO;
    modify($il) {
        icb = newIcb;
    };
end

rule "¿Requiere icb aplica helper?" when
    $il: /invoiceLines[ icbAplica == false, icb != null, icb.compareTo(BigDecimal.ZERO) > 0 ]
then
    modify($il) {
        icbAplica = true;
    };
end

rule "¿Requiere igv tasa?" when
    $il: /invoiceLines[ igvTasa == null, igvTipo != null ]
then
    Catalog7 catalog7 = Catalog.valueOfCode(Catalog7.class, $il.igvTipo).orElseThrow(Catalog.invalidCatalogValue);

    BigDecimal newIgvTasa;
    if (catalog7.getGrupo().equals(Catalog7_1.GRAVADO)) {
        newIgvTasa = catalog7.equals(Catalog7.GRAVADO_IVAP) ? new BigDecimal("0.4") : new BigDecimal("0.18");
    } else {
        newIgvTasa = BigDecimal.ZERO;
    }

    modify($il) {
        igvTasa = newIgvTasa;
    };
end

rule "¿Requiere base imponible?" when
    $il: /invoiceLines[ igvBaseImponible == null, igvTasa != null, precio != null  ]
then
    BigDecimal newIgvBaseImponible = !$il.precioConImpuestos ?
        $il.cantidad.multiply($il.precio) :
        $il.cantidad.multiply($il.precio).divide($il.igvTasa.add(BigDecimal.ONE), 2 , RoundingMode.HALF_EVEN);
    modify($il) {
        igvBaseImponible = newIgvBaseImponible;
    };
end

rule "¿Requiere igv?" when
    $il: /invoiceLines[ igv == null, igvTasa != null, igvBaseImponible != null ]
then
    BigDecimal newIgv = $il.igvTasa.multiply($il.igvBaseImponible);
    modify($il) {
        igv = newIgv;
    };
end

rule "¿Requiere valor de venta sin impuestos?" when
    $il: /invoiceLines[ valorVentaSinImpuestos == null, precio != null, cantidad != null, igvTasa != null ]
then
    BigDecimal newValorVentaSinImpuestos = !$il.precioConImpuestos ?
        $il.precio.multiply($il.cantidad) :
        $il.precio.multiply($il.cantidad).divide($il.igvTasa.add(BigDecimal.ONE), 2, RoundingMode.HALF_EVEN);
    modify($il) {
        valorVentaSinImpuestos = newValorVentaSinImpuestos;
    };
end