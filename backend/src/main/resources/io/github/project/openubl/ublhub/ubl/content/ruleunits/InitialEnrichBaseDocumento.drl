package io.github.project.openubl.ublhub.ubl.content.ruleunits;
unit InitialEnrichBaseDocumentoUnit;

import java.time.LocalDate;
import java.time.LocalTime;
import java.math.BigDecimal;

import io.github.project.openubl.ublhub.ubl.content.catalogs.Catalog1_Invoice;
import io.github.project.openubl.ublhub.ubl.content.catalogs.CatalogContadoCredito;

import io.github.project.openubl.ublhub.ubl.content.models.common.Firmante;
import io.github.project.openubl.ublhub.ubl.content.models.standard.general.BoletaFactura;

query document
    $d: /document
end


rule "¿Requiere moneda?" when
    $d: /document[ moneda == null ]
then
    modify($d) {
        moneda = config.defaultMoneda
    };
end

rule "¿Requiere fecha?" when
    $d: /document[ fechaEmision == null ]
then
    modify($d) {
        fechaEmision = LocalDate.now();
    };
end

rule "¿Requiere forma de pago tipo?" when
    $d: /document[ formaDePago == null  ]
then
    String newFormaDePago = $d.formaDePagoCuotas == null || $d.formaDePagoCuotas.isEmpty() ?
        CatalogContadoCredito.CONTADO.getCode() :
        CatalogContadoCredito.CREDITO.getCode();
    modify($d) {
        formaDePago = newFormaDePago;
    };
end

rule "¿Requiere forma de pago total cuotas?" when
    $d: /document[ formaDePagoTotal == null, formaDePagoCuotas != null, formaDePagoCuotas.size > 0  ]
then
    BigDecimal newFormaDePagoTotal = $d.formaDePagoCuotas.stream().map(e -> e.importe).reduce(BigDecimal.ZERO, BigDecimal::add);
    modify($d) {
        formaDePagoTotal = newFormaDePagoTotal;
    };
end


rule "¿Requiere firmante?" when
    $d: /document[ firmante == null, proveedor != null ]
then
    Firmante newFirmante = new Firmante();
    newFirmante.ruc = $d.proveedor.ruc;
    newFirmante.razonSocial = $d.proveedor.razonSocial;

    $d.firmante = newFirmante;
end

rule "¿Requiere proveedor.dirección.codigoLocal?" when
    $d: /document/proveedor/direccion[ codigoLocal == null ]
then
    $d.codigoLocal = "0000";
end
